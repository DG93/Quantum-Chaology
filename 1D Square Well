# -*- coding: utf-8 -*-

import numpy as np
from numpy import linalg
from math import sqrt
import oneDQCfunctions as qcf

        
n =151#int(input("Enter an (odd) number of steps: "))
l = 1#float(input("Enter width of well: "))
state = 1#int(input("Enter energy state (GS=1): "))
state = state-1
a = l/n
sigma_psi = a**2
H = qcf.genMatrix(n)
# Ansatz probability wavefunction
xt = np.linspace(0,l,n+2)
ansatz = (sqrt((2/l))*np.sin(((state+1)*np.pi*xt)/l))**2
# Ansatz energy
k = ((state+1)*np.pi)/l
ans_energy = ( (k**2)/ (2) )*a**2


##################### NOT USING SYMMETRIES #####################

w, v = linalg.eig(H)
# enumerate list and sort by eigenvalues
# return index of relevant energy level
state_ind = sorted(enumerate(w), key=lambda x: x[1])[state][0]
# Wavefunction
c = qcf.genWvf(v,n,state_ind)
# Normalised Probability
C = qcf.genProb(c, l, n)   
# Discrete Prob. Error
sigma_p = qcf.probError(c, sigma_psi)
# Calculate energy from eigenvalue
energy = (( (w[state_ind])/ (2) ))
# Plot
qcf.plotProb(l,n,C,state,sigma_p,ansatz, energy, ans_energy, a)
# Difference plot
qcf.plotDiff(l,n,C,ansatz,state)
# Discrete energy errors
sigma_l = qcf.discEnError(n,sigma_psi,v,w)
# Both energies plot
qcf.plotEvN(n,n,w,l,a)
# Difference in energies plot
qcf.plotEdiff(n,n,w,l,a)
# Print energies
#qcf.printE(n,N,w,l,a,state,energy)


##################### USING SYMMETRIES #####################

oe = qcf.OE(state)
N = int((n+1)/2)
sH = qcf.redMatrix(H,N,oe)
#print(sH)
sw, sv = linalg.eig(sH)
#print(v)
#print(sv)
s_state = int((state+1)/2)
s_state_ind = sorted(enumerate(sw), key=lambda x: x[1])[s_state][0]
sE = (( (sw[s_state_ind])/ (4) ))
# Wavefunction
sc = qcf.genWvf(sv,N,s_state_ind)
ssc = qcf.mirrorWvf(sc)
# Normalised Probability
sC = qcf.genProb(ssc, l, n)
s_sigma_p = qcf.probError(ssc, sigma_psi)
# Plot
qcf.plotProb(l,n,sC,state,s_sigma_p,ansatz, sE, ans_energy, a)
# Difference plot
qcf.plotDiff(l,n,sC,ansatz,state)
# Both energies plot
qcf.plotEvN(n,N,sw/2,l,a)
# Difference in energies plot
qcf.plotEdiff(n,N,sw/2,l,a)
# Print energies
qcf.printE(n,N,sw/2,l,a,s_state,sE)
