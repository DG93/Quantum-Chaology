# -*- coding: utf-8 -*-
"""
Created on Wed Sep 30 17:35:32 2015

@author: DNSG
"""

import numpy as np
from numpy import matrix
from numpy import linalg
import math
from math import sqrt,sin,pi
import matplotlib.pyplot as plt
import scipy.constants as sc

""" 
2D well labelled in following pattern:
  _____
 |4 5 6|
 |1 2 3|
 |_____|
"""     
r = int(input("Enter number points in y axis: "))
c = int(input("Enter number of points in x axis: "))
x = float(input("Enter width (x axis) of well: "))
y = float(input("Enter depth (y axis) of well: "))
state = int(input("Enter energy state (GS=1): "))
n = r*c
state = state-1
a = y/r # spacing in y axis
b = x/c # spacing in x axis

H = np.zeros((n,n))
i,j = np.indices(H.shape)
H[i==j] = 4.
H[i==j-1] = -1.
H[i==j+1] = -1.

larger = 1
smaller = 1
if r > c:
    larger = r
    smaller = c
elif r == c:
    larger = r
    smaller = r
else:
    larger = c
    smaller = r

H[i==j+larger] = -1
H[i==j-larger] = -1
for k in range(1,smaller):
    ks = k*larger
    if(ks)<=n:
        H[ks-1,ks] = 0
        H[ks,ks-1] = 0
 
print(H)

w, v = linalg.eig(H)
# enumerate list and sort by eigenvalues
# return index of relevant energy level
state_ind = sorted(enumerate(w), key=lambda x: x[1])[state][0]
m = (r+1)*(c+1)

#print("Eigenvalues:")
#print(w)
#print("Eigenvectors:")
#print(v)

xt = []
for i in range(0, c+2):
    xt.append((x*i)/(c+1))
    #print('xt[{}] = {}'.format(i, xt[i]))

yt = []
for i in range(0, r+2):
    yt.append((y*i)/(r+1))
    #print('yt[{}] = {}'.format(i, yt[i]))

x_v = [0]
for i in range(0,c):
    x_v.append(v[i,state_ind]) # IS THIS THE RIGHT WAY AROUND ???
x_v.append(0)
y_v = [0]
for i in range(0, n-1, c):
    y_v.append(v[i, state_ind])
y_v.append(0)
#for i in range(0,r+2):   
    #print('y_v[{}] = {}'.format(i, y_v[i]))
#for i in range(0,c+2):
    #print('x_v[{}] = {}'.format(i, x_v[i]))

plt.plot(xt, x_v, label='x axis')
plt.plot(yt, y_v, label='y axis')

plt.legend()
plt.show()
