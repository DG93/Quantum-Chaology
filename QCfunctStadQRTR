# -*- coding: utf-8 -*-
"""
Created on Tue Oct 13 14:03:57 2015

@author: mbyx9dl2
"""
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm
import scipy.integrate
from mpl_toolkits.mplot3d import Axes3D

def delta(x,a):
    if x in a:
        return 1
    else:
        return 0

def inside(i,j, c, r):
    xr = (c+1)-(r+1)/2
    yr = (r+1)/2
    xl = (r+1)/2
    yl = yr
    R = (r+1)/2-1
    if (j>=xl) and (j<=xr):
        return 1
    else:
        if(j<xl)and((j-xl)**2+(i-yl)**2<=R**2):
            return 1
        elif(j>xr)and((j-xr)**2+(i-yr)**2<=R**2):
            return 1
        else: return 0
        
def genMatrix(i,j,a,b):
    M = []
    for marker in range(0,len(i)):
        R=[None]*len(i)
        for k in range(0, len(i)):
            if marker == 0:
                if k == marker:
                    R[k] = 4
                elif (i[k] == i[marker]+1 and j[k] == j[marker]):
                    R[k] = -1
                elif (i[k] == i[marker] and j[k] == j[marker]+1):
                    R[k] = -1
                else:
                    R[k] = 0
            elif marker == (len(i)-1):
                if k == marker:
                    R[k] = 4
                elif (i[k] == i[marker]-1 and j[k] == j[marker]):
                    R[k] = -1        
                elif (i[k] == i[marker] and j[k] == j[marker]-1):
                    R[k] = -1
                else:
                    R[k] = 0
            else:
                if k == marker:
                    R[k] = 4
                elif (i[k] == i[marker]+1 and j[k] == j[marker]):
                    R[k] = -1
                elif (i[k] == i[marker]-1 and j[k] == j[marker]):
                    R[k] = -1
                elif (i[k] == i[marker] and j[k] == j[marker]+1):
                    R[k] = -1
                elif (i[k] == i[marker] and j[k] == j[marker]-1):
                    R[k] = -1
                else:
                    R[k] = 0
        M.append(R)
    M = np.array(M)
    return M
        
def I(i,j, C):
    I=0
    for k in range(0,i):
        I = I + C[k]
    I = I+j
    return I
    
def ij(I,c):
    i = (I-1)//c +1
    j = (I-1)%c +1
    return i,j
  
def arrayFromZ(v, c, r, halfC, xt, yt, sym_type):
    Colsum = 0
    vert_odd = 0
    hor_odd = 0
    z=[]
    halfC2 = halfC[(r-1)//2:len(halfC)]
    if sym_type == "oo": 
        vert_odd = 1
        hor_odd = 1
        z.append(np.zeros((c+1)//2))
    if sym_type == "oe": 
        vert_odd = 0
        hor_odd = 1
    if sym_type == "eo": 
        vert_odd = 1
        hor_odd = 0 
        z.append(np.zeros((c+1)//2))
    z_t=[]
    for i in range(vert_odd,(r+1)//2):
        print(halfC2[i]-hor_odd, Colsum)
        if hor_odd == 1: z_t.append(0)
        for k in range(Colsum,Colsum+halfC2[i]-hor_odd):
            z_t.append((v[k]))
        z.append(z_t.copy())    
        print(z_t)
        z_t.clear()
        Colsum = Colsum+halfC2[i]-hor_odd
    print('z = ')
    print(z)
    zero = np.zeros(((r+2), (c+2)))
    zero2 = np.zeros(((r+2), (c+2)))
    zero3 = np.zeros(((r+2), (c+2)))
    zero4 = np.zeros(((r+2), (c+2)))
    for i in range(0,(r+1)//2):
        for j in range(0,halfC[(r-1)//2+i]): 
            np.put(zero[(r-1)//2+(i+1)], [((c+1)//2+j)], z[i][j])
            np.put(zero2[(r-1)//2-(i-1)], [((c+1)//2-j)], z[i][j])
            np.put(zero3[(r-1)//2+(i+1)], [((c+1)//2-j)], z[i][j])
            np.put(zero4[(r-1)//2-(i-1)], [((c+1)//2+j)], z[i][j])
    z=zero+zero2+zero3+zero4
    for i in range(0,r+2):
        z[i,(c+2)//2] = z[i,(c+2)//2]/np.sqrt(2)
    for j in range(0,c+2):                       
        z[(r+2)//2,j] = z[(r+2)//2,j]/np.sqrt(2)
    z = z*z
    Ix=[]
    for i in range(0,r+2):
        Ix.append(scipy.integrate.simps(z[i,:], x=xt))   
    I = scipy.integrate.simps(Ix, x=yt)
    z=z/I
    return z
 
################################# PLOTTING #################################
   
def plotMap(xmap,ymap):
    fig = plt.figure(figsize=(15,15))
    plt.plot(xmap, ymap, 'ro')
    plt.title('Points', fontsize=30)
    plt.xlabel('$x$',fontsize=20)
    plt.ylabel('$y$',fontsize=20)
    plt.show()
    fig.savefig('Map.png')

def plot2Dpsi(X,Y,z,m, ansatz): 
    fig = plt.figure(figsize=(14,12))
    ax = fig.add_subplot(111, projection='3d')
    #z = abs(z)
    surf = ax.plot_surface(X,Y,z, cmap=cm.coolwarm, cstride=1, rstride=1)
    #ax.plot_wireframe(X,Y,ansatz, cstride=1, rstride=1)
    fig.colorbar(surf)
    plt.xlabel('$x_i$',fontsize=20)
    plt.ylabel('$y_i$',fontsize=20)
    ax.set_zlabel('$|\psi|^2$',fontsize=20)
    plt.legend()
    plt.show()
    fig.savefig('Billiard_%i.png' %m)
    
def plotEnergies(nt, E, Et):
    fig = plt.figure(figsize=(15,10))
    plt.plot(nt, E, label='Numeric')
    plt.plot(nt, Et(nt), label='Polynomial')
    plt.title('Energy vs n', fontsize=30)
    plt.ylabel('Energy',fontsize=20)
    plt.xlabel('n',fontsize=20)
    plt.legend()
    plt.show()
    fig.savefig('Billiard_E_vs_n.png')
    
def plotN(E,polyN, nt):
    fig = plt.figure(figsize=(15,10))
    plt.plot(polyN(E), E, label='Polynomial')
    plt.plot(nt, E, label='Numeric')
    plt.title('n vs energy', fontsize=30)
    plt.xlabel('Energy',fontsize=20)
    plt.ylabel('n',fontsize=20)
    plt.legend()
    plt.show()
    fig.savefig('Billiard_n_vs_E.png')
    
def plotPolyN(nt, polyN, E):
    fig = plt.figure(figsize=(15,10))
    plt.plot(nt, polyN(E), label='Polynomial fit')
    plt.plot(nt,nt, label='Perfect fit')
    plt.title('n vs Polynomial n', fontsize=30)
    plt.xlabel('Polynomial n',fontsize=20)
    plt.ylabel('n',fontsize=20)
    plt.legend()
    plt.show()
    fig.savefig('Billiard_n_vs_polyn.png')
    
def plotDelta(nt, PolyN, E):
    delta=[]
    ntt = []
    for i in range(0,len(nt)-1):
        delta.append(abs(PolyN(E[i]+1)-PolyN(E[i])))
        ntt.append(nt[i]-nt[0])
    fig = plt.figure(figsize=(15,10))
    plt.hist(delta, bins=50,  histtype='bar', label='Delta = n($E_{i+1}$) - n($E_{i}$)')        
    plt.title('Delta histogram', fontsize=30)
    plt.ylabel('Frequency',fontsize=20)
    plt.xlabel('Delta',fontsize=20)
    plt.legend()
    plt.show()
    fig.savefig('Billiard_nbar_hist.png')
    
def plotContour(X,Y,z, m):
    fig = plt.figure(figsize=(15,10))
    plt.contourf(X, Y, z, 100, cmap=cm.gist_rainbow)
    plt.title('Contour plot for %ith energy' %m, fontsize=14)
    plt.xlabel('$x$',fontsize=20)
    plt.ylabel('$y$',fontsize=20)
    plt.colorbar()
    plt.show()
    fig.savefig('Contour_%i.png' %m)
