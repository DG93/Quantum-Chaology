# -*- coding: utf-8 -*-
"""
Created on Tue Oct 13 14:03:57 2015

@author: mbyx9dl2
"""
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm
from mpl_toolkits.mplot3d import Axes3D
    
def I(i,j,c):
    I = (i-1)*c+j
    return I
    
def ij(I,c):
    i = (I-1)//c +1
    j = (I-1)%c +1
    return i,j
    
def createMatrix(x, y, c, r):
    a = x/c # spacing in x axis
    b = y/r # spacing in y axis
    n = r*c
    H = np.zeros((n,n))
    i,j = np.indices(H.shape)
    H[i==j] = 2*((a**2)+(b**2))
    H[i==j-1] = -b**2
    H[i==j+1] = -b**2
    larger = max(r,c)
    smaller = min(r,c)
    if r == c:
        larger = r
        smaller = r
    H[i==j+larger] = -a**2
    H[i==j-larger] = -a**2
    for k in range(1,smaller):
        ks = k*larger
        if(ks)<=n:
            H[ks-1,ks] = 0
            H[ks,ks-1] = 0
    return H
    
def genMatrix(i,j):
    M = []
    for marker in range(0,len(i)):
        R=[None]*len(i)
        for k in range(0, len(i)):
            if marker == 0:
                if k == marker:
                    R[k] = 4.
                elif (i[k] == i[marker]+1 and j[k] == j[marker]):
                    R[k] = -1
                elif (i[k] == i[marker] and j[k] == j[marker]+1):
                    R[k] = -1
                else:
                    R[k] = 0                    
            elif marker == (len(i)-1):
                if k == marker:
                    R[k] = 4
                elif (i[k] == i[marker]-1 and j[k] == j[marker]):
                    R[k] = -1        
                elif (i[k] == i[marker] and j[k] == j[marker]-1):
                    R[k] = -1
                else:
                    R[k] = 0                    
            else:
                if k == marker:
                    R[k] = 4
                elif (i[k] == i[marker]+1 and j[k] == j[marker]):
                    R[k] = -1
                elif (i[k] == i[marker]-1 and j[k] == j[marker]):
                    R[k] = -1
                elif (i[k] == i[marker] and j[k] == j[marker]+1):
                    R[k] = -1
                elif (i[k] == i[marker] and j[k] == j[marker]-1):
                    R[k] = -1
                else:
                    R[k] = 0
        M.append(R)
    M = np.array(M)
    return M

def arrayFromZ(v, c, r):
    # Reshape the eigenvector
    z = v.reshape((r,c))
    # Add in boundary conditions
    z = np.insert(z,0,0, axis=1)
    z = np.insert(z,c+1,0, axis=1)
    z = np.insert(z, 0,0,axis=0)
    zero = np.zeros((1,c+2))
    z = np.append(z,zero, axis=0 )
    z = z*z
    return z
    
def plotMap(xmap,ymap):
    fig = plt.figure(figsize=(15,15))
    plt.plot(xmap, ymap, 'ro')
    plt.title('Points', fontsize=30)
    plt.xlabel('$x$',fontsize=20)
    plt.ylabel('$y$',fontsize=20)
    plt.show()
    fig.savefig('Map.png')

def plot2Dpsi(X,Y,z):
    fig = plt.figure(figsize=(10,8))
    ax = fig.add_subplot(111, projection='3d')
    surf = ax.plot_surface(X,Y,z, cmap=cm.coolwarm, cstride=1, rstride=1)
    fig.colorbar(surf)
    plt.xlabel('$x_i$',fontsize=20)
    plt.ylabel('$y_i$',fontsize=20)
    ax.set_zlabel('$|\psi|^2$',fontsize=20)
    plt.legend()
    plt.show()
    fig.savefig('2Dwell.png')
    
def plotContour(X,Y,z, m):
    fig = plt.figure(figsize=(15,15))
    plt.contourf(X, Y, z, 100, cmap=cm.gist_rainbow)
    plt.title('Contour plot for %ith energy' %(m), fontsize=14)
    plt.xlabel('$x$',fontsize=20)
    plt.ylabel('$y$',fontsize=20)
    #plt.colorbar()
    plt.show()
    fig.savefig('Contour_%i.png' %(m))
    
def plotEnergies(nt, E, Et):
    fig2 = plt.figure(figsize=(15,10))
    plt.plot(nt, E, label='Numeric')
    plt.plot(nt,Et, label='Analytic')
    plt.title('Energy vs n', fontsize=30)
    plt.xlabel('$n$',fontsize=20)
    plt.ylabel('$Energy$',fontsize=20)
    plt.legend()
    plt.show()
    fig2.savefig('2D_E_vs_n.png')
